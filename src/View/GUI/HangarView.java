
package View.GUI;

import controller.Controller;
import javax.swing.JPanel;
import java.awt.Color;
import javax.swing.BorderFactory;
import java.util.ArrayList;
import java.awt.Component;

import deepspace.HangarToUI;
import deepspace.ShieldToUI;
import deepspace.WeaponToUI;

/**
 * @brief Esta clase implementa la interfaz gráfica de un objeto de tipo HangarToUI
 */
public class HangarView extends JPanel {

    /**
     * @brief Constructor por defecto de la clase
     */
    public HangarView() {
        initComponents();
    }
    
    /**
     * @brief Asocia al panel un objeto ToUI de HangarView
     * @param h : Objeto HangarToUI que se le pasará a la vista
     */
    public void setHangar(HangarToUI h){
        if(h == null){
            setVisible(false);
        }
        else{
            weaponsPanel.removeAll();
            shieldsPanel.removeAll();
            String title = "Hangar con " + h.getMaxElements() + " lugares";
            weaponsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK), title));
            shieldsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK), title));

            ArrayList<WeaponToUI> weapons = h.getWeapons();
            ArrayList<ShieldToUI> shieldBoosters = h.getShieldBoosters();
        
            for(WeaponToUI w : weapons){
                WeaponView weaponView = new WeaponView();
                weaponView.setWeapon(w);
                weaponsPanel.add(weaponView);
            }
        
            for(ShieldToUI s : shieldBoosters){
                ShieldView shieldView = new ShieldView();
                shieldView.setShield(s);
                shieldsPanel.add(shieldView);
            }
        }
        
        repaint();
        revalidate();
    }
    
    /**
     * @brief Obtiene los elementos que han sido seleccionados por el usuario
     * @param weaponsSelected : Almacena los índices de los weapons del hangar seleccionados por el usuario
     * @param shieldsSelected : Almacena los índices de los shieldBosoter del hangar seleccionados por el usuario
     */
    ArrayList<Integer> getSelectedWeaponsInHangar(){
        ArrayList<Integer> selectedWeapons = new ArrayList<>();
      
        int i = 0; 
        for(Component c : weaponsPanel.getComponents()){
            if (((WeaponView) c).isSelected())
                selectedWeapons.add(i);
            i++;
        }
        
        return selectedWeapons;                
   }
        
    ArrayList<Integer> getSelectedShieldsInHangar(){
        ArrayList<Integer> selectedShields = new ArrayList<>();
      
        int i = 0; 
        for(Component c : shieldsPanel.getComponents()){
            if (((ShieldView) c).isSelected())
                selectedShields.add(i);
            i++;
        }
        
        return selectedShields;                
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPanel1 = new javax.swing.JScrollPane();
        weaponsPanel = new javax.swing.JPanel();
        jScrollPanel2 = new javax.swing.JScrollPane();
        shieldsPanel = new javax.swing.JPanel();

        weaponsPanel.setPreferredSize(new java.awt.Dimension(200, 120));
        jScrollPanel1.setViewportView(weaponsPanel);

        shieldsPanel.setPreferredSize(new java.awt.Dimension(200, 120));
        jScrollPanel2.setViewportView(shieldsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPanel2)
                    .addComponent(jScrollPanel1))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPanel1;
    private javax.swing.JScrollPane jScrollPanel2;
    private javax.swing.JPanel shieldsPanel;
    private javax.swing.JPanel weaponsPanel;
    // End of variables declaration//GEN-END:variables
}
